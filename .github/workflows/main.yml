name: build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  workflow_dispatch:

env:
  KERNEL_VERSION: 6.12.25
  PICORE_VERSION_MAJOR: 16
  PICORE_VERSION_MINOR: 0
  PICORE_VERSION_MICRO: 0

jobs:
  build:
    runs-on: ubuntu-24.04-arm
    strategy:
      matrix:
        package: [piCore, piCore64]

    env:
      TAG: "latest-${{matrix.package}}"

    steps:
      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/asssaf/picore
          tags: "type=raw,value=${{ env.TAG }},priority=2000"

      - name: Build and push builder image
        uses: docker/build-push-action@v6
        with:
          file: docker/Dockerfile
          platforms: linux/arm64/v8
          target: install
          build-args: |
            PACKAGE=${{ matrix.package }}
            PICORE_VERSION_MAJOR=${{ env.PICORE_VERSION_MAJOR }}
            PICORE_VERSION_MINOR=${{ env.PICORE_VERSION_MINOR }}
            PICORE_VERSION_MICRO=${{ env.PICORE_VERSION_MICRO }}
            TCEMIRROR=${{ secrets.TCEMIRROR }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export mydata.tgz
        uses: docker/build-push-action@v6
        with:
          file: docker/Dockerfile
          platforms: linux/arm64/v8
          target: mydata
          build-args: |
            PACKAGE=${{ matrix.package }}
            PICORE_VERSION_MAJOR=${{ env.PICORE_VERSION_MAJOR }}
            PICORE_VERSION_MINOR=${{ env.PICORE_VERSION_MINOR }}
            PICORE_VERSION_MICRO=${{ env.PICORE_VERSION_MICRO }}
            TCEMIRROR=${{ secrets.TCEMIRROR }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: "type=local,dest=${{github.workspace}}/artifacts"

      - name: upload mydata
        uses: actions/upload-artifact@v4
        with:
          name: mydata-${{matrix.package}}.tgz
          path: "${{github.workspace}}/artifacts/mydata.tgz"

      - name: Export tce
        uses: docker/build-push-action@v6
        with:
          file: docker/Dockerfile
          platforms: linux/arm64/v8
          target: tce
          build-args: |
            PACKAGE=${{ matrix.package }}
            PICORE_VERSION_MAJOR=${{ env.PICORE_VERSION_MAJOR }}
            PICORE_VERSION_MINOR=${{ env.PICORE_VERSION_MINOR }}
            PICORE_VERSION_MICRO=${{ env.PICORE_VERSION_MICRO }}
            TCEMIRROR=${{ secrets.TCEMIRROR }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: "type=tar,dest=${{github.workspace}}/artifacts/tce.tar"

      - name: upload tce
        uses: actions/upload-artifact@v4
        with:
          name: tce-${{matrix.package}}.tar
          path: "${{github.workspace}}/artifacts/tce.tar"

      - name: Export firmware-with-tce
        uses: docker/build-push-action@v6
        with:
          file: docker/Dockerfile
          platforms: linux/arm64/v8
          target: firmware-with-tce
          build-args: |
            PACKAGE=${{ matrix.package }}
            PICORE_VERSION_MAJOR=${{ env.PICORE_VERSION_MAJOR }}
            PICORE_VERSION_MINOR=${{ env.PICORE_VERSION_MINOR }}
            PICORE_VERSION_MICRO=${{ env.PICORE_VERSION_MICRO }}
            TCEMIRROR=${{ secrets.TCEMIRROR }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: "type=tar,dest=${{github.workspace}}/artifacts/firmware-with-tce.tar"

      - name: upload firmware-with-tce
        uses: actions/upload-artifact@v4
        with:
          name: firmware-with-tce-${{matrix.package}}.tar
          path: "${{github.workspace}}/artifacts/firmware-with-tce.tar"

      - name: build-firmware-with-tce-image
        uses: docker/build-push-action@v6
        with:
          file: docker/Dockerfile
          platforms: linux/arm64/v8
          target: firmware-with-tce-image
          build-args: |
            PACKAGE=${{ matrix.package }}
            PICORE_VERSION_MAJOR=${{ env.PICORE_VERSION_MAJOR }}
            PICORE_VERSION_MINOR=${{ env.PICORE_VERSION_MINOR }}
            PICORE_VERSION_MICRO=${{ env.PICORE_VERSION_MICRO }}
            TCEMIRROR=${{ secrets.TCEMIRROR }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: "type=local,dest=${{github.workspace}}/artifacts/firmware-with-tce.img"

      - name: upload firmware with tce image
        uses: actions/upload-artifact@v4
        with:
          name: firmware-with-tce-${{matrix.package}}.img
          path: "${{github.workspace}}/artifacts/firmware-with-tce.img"

      - name: build-firmware-disk-image
        uses: docker/build-push-action@v6
        with:
          file: docker/Dockerfile
          platforms: linux/arm64/v8
          target: firmware-with-tce-disk-image
          build-args: |
            PACKAGE=${{ matrix.package }}
            PICORE_VERSION_MAJOR=${{ env.PICORE_VERSION_MAJOR }}
            PICORE_VERSION_MINOR=${{ env.PICORE_VERSION_MINOR }}
            PICORE_VERSION_MICRO=${{ env.PICORE_VERSION_MICRO }}
            TCEMIRROR=${{ secrets.TCEMIRROR }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: "type=local,dest=${{github.workspace}}/artifacts/firmware-with-tce-disk-${{matrix.package}}.img"

      - name: upload firmware with tce disk image
        uses: actions/upload-artifact@v4
        with:
          name: firmware-with-tce-disk-${{matrix.package}}.img
          path: "${{github.workspace}}/artifacts/firmware-with-tce-disk-${{matrix.package}}.img"

      - name: Export rootfs
        uses: docker/build-push-action@v6
        with:
          file: docker/Dockerfile
          platforms: linux/arm64/v8
          target: rootfs
          build-args: |
            PACKAGE=${{ matrix.package }}
            PICORE_VERSION_MAJOR=${{ env.PICORE_VERSION_MAJOR }}
            PICORE_VERSION_MINOR=${{ env.PICORE_VERSION_MINOR }}
            PICORE_VERSION_MICRO=${{ env.PICORE_VERSION_MICRO }}
            TCEMIRROR=${{ secrets.TCEMIRROR }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: "type=local,dest=${{github.workspace}}/artifacts/"

      - name: upload rootfs
        uses: actions/upload-artifact@v4
        with:
          name: rootfs-${{matrix.package}}
          path: "${{github.workspace}}/artifacts/rootfs-${{matrix.package}}-${{env.PICORE_VERSION_MAJOR}}.${{env.PICORE_VERSION_MINOR}}.gz"


  test:
    strategy:
      matrix:
        package: [piCore, piCore64]
    runs-on: ubuntu-24.04
    needs: [build]
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: install-qemu
        run: |
          sudo apt update
          sudo apt install -y qemu-system-arm

      - name: download-tce-disk
        uses: actions/download-artifact@v4
        with:
          name: firmware-with-tce-disk-${{matrix.package}}.img
          path: "${{github.workspace}}"

      - name: download-rootfs
        uses: actions/download-artifact@v4
        with:
          name: rootfs-${{matrix.package}}
          path: "${{github.workspace}}"

      - name: run
        timeout-minutes: 10
        env:
          PACKAGE: "${{matrix.package}}"
        run: |
          set -euxo pipefail

          docker create --name rpi-kernel --platform linux/arm64/v8 ghcr.io/asssaf/rpi-kernel:${{ env.KERNEL_VERSION }}-default true
          docker cp rpi-kernel:/Image-${{ env.KERNEL_VERSION }} .

          scripts/run-tc.sh |& tee qemu.out &

          until sshpass -p piCore ssh -o StrictHostKeychecking=no -p 2223 tc@127.0.0.1 echo hi
          do
            sleep 5
          done
          sshpass -p piCore ssh -o StrictHostKeychecking=no -p 2223 tc@127.0.0.1 tryboot
          sshpass -p piCore ssh -o StrictHostKeychecking=no -p 2223 tc@127.0.0.1 sudo poweroff

      - name: upload log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: qemu.out
          path: "${{github.workspace}}/qemu.out"

