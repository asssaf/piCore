name: build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  workflow_dispatch:

env:
  KERNEL_FAMILY: 6.x
  KERNEL_VERSION: 6.12.25
  PICORE_VERSION_MAJOR: 16
  PICORE_VERSION_MINOR: 0
  PICORE_VERSION_MICRO: 0
  TAG: lastest

jobs:
  build:
    runs-on: ubuntu-24.04-arm
    strategy:
      matrix:
        package: [piCore, piCore64]

    steps:
      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/asssaf/picore
          tags: "type=raw,value=${{ env.TAG }},priority=2000"

      - name: Build and push builder image
        uses: docker/build-push-action@v6
        with:
          file: docker/Dockerfile
          platforms: linux/arm64/v8
          target: install
          build-args: |
            PACKAGE=${{ matrix.package }}
            PICORE_VERSION_MAJOR=${{ env.PICORE_VERSION_MAJOR }}
            PICORE_VERSION_MINOR=${{ env.PICORE_VERSION_MINOR }}
            PICORE_VERSION_MICRO=${{ env.PICORE_VERSION_MICRO }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export mydata.tgz
        uses: docker/build-push-action@v6
        with:
          file: docker/Dockerfile
          platforms: linux/arm64/v8
          target: mydata
          build-args: |
            PACKAGE=${{ matrix.package }}
            PICORE_VERSION_MAJOR=${{ env.PICORE_VERSION_MAJOR }}
            PICORE_VERSION_MINOR=${{ env.PICORE_VERSION_MINOR }}
            PICORE_VERSION_MICRO=${{ env.PICORE_VERSION_MICRO }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: "type=local,dest=${{github.workspace}}/artifacts"

      - name: upload mydata
        uses: actions/upload-artifact@v4
        with:
          name: mydata-${{matrix.package}}.tgz
          path: "${{github.workspace}}/artifacts/mydata.tgz"

      - name: Export tce
        uses: docker/build-push-action@v6
        with:
          file: docker/Dockerfile
          platforms: linux/arm64/v8
          target: tce
          build-args: |
            PACKAGE=${{ matrix.package }}
            PICORE_VERSION_MAJOR=${{ env.PICORE_VERSION_MAJOR }}
            PICORE_VERSION_MINOR=${{ env.PICORE_VERSION_MINOR }}
            PICORE_VERSION_MICRO=${{ env.PICORE_VERSION_MICRO }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: "type=tar,dest=${{github.workspace}}/artifacts/tce.tar"

      - name: upload tce
        uses: actions/upload-artifact@v4
        with:
          name: tce-${{matrix.package}}.tar
          path: "${{github.workspace}}/artifacts/tce.tar"

      - name: build-tce-image
        run: |
          set -xe
          sudo apt install -y dosfstools
          truncate -s 200M tce.img
          mkfs.vfat -n RECOVERY -F 16 tce.img
          sudo mount -o loop tce.img /mnt
          sudo tar -xvf "${GITHUB_WORKSPACE}/artifacts/tce.tar" -C /mnt --no-same-owner --no-same-permissions
          sudo umount /mnt
          mv tce.img "${GITHUB_WORKSPACE}/artifacts/tce.img"

      - name: upload tce image
        uses: actions/upload-artifact@v4
        with:
          name: tce-${{matrix.package}}.img
          path: "${{github.workspace}}/artifacts/tce.img"

      - name: build-tce-disk-image
        run: |
          sudo apt install -y parted
          truncate -s 300M tce-disk.img
          parted -s tce-disk.img mklabel msdos mkpart primary fat16 2048s 100%
          dd if="${GITHUB_WORKSPACE}/artifacts/tce.img" of=tce-disk.img bs=512 seek=2048
          mv tce-disk.img "${GITHUB_WORKSPACE}/artifacts/tce-disk.img"

      - name: upload disk image
        uses: actions/upload-artifact@v4
        with:
          name: tce-disk-${{matrix.package}}.img
          path: "${{github.workspace}}/artifacts/tce-disk.img"

      - name: Export firmware-with-tce
        uses: docker/build-push-action@v6
        with:
          file: docker/Dockerfile
          platforms: linux/arm64/v8
          target: firmware
          build-args: |
            PACKAGE=${{ matrix.package }}
            PICORE_VERSION_MAJOR=${{ env.PICORE_VERSION_MAJOR }}
            PICORE_VERSION_MINOR=${{ env.PICORE_VERSION_MINOR }}
            PICORE_VERSION_MICRO=${{ env.PICORE_VERSION_MICRO }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: "type=tar,dest=${{github.workspace}}/artifacts/firmware-with-tce.tar"

      - name: upload firmware-with-tce
        uses: actions/upload-artifact@v4
        with:
          name: firmware-with-tce-${{matrix.package}}.tar
          path: "${{github.workspace}}/artifacts/firmware-with-tce.tar"

      - name: build-firmware-with-tce-image
        run: |
          set -xe
          sudo apt install -y dosfstools
          truncate -s 200M firmware-with-tce.img
          mkfs.vfat -n RECOVERY -F 16 firmware-with-tce.img
          sudo mount -o loop firmware-with-tce.img /mnt
          sudo tar -xvf "${GITHUB_WORKSPACE}/artifacts/firmware-with-tce.tar" -C /mnt --no-same-owner --no-same-permissions
          sudo umount /mnt
          mv firmware-with-tce.img "${GITHUB_WORKSPACE}/artifacts/firmware-with-tce.img"

      - name: upload firmware with tce image
        uses: actions/upload-artifact@v4
        with:
          name: firmware-with-tce-${{matrix.package}}.img
          path: "${{github.workspace}}/artifacts/firmware-with-tce.img"

      - name: build-firmware-disk-image
        run: |
          sudo apt install -y parted
          truncate -s 300M firmware-with-tce-disk.img
          parted -s firmware-with-tce-disk.img mklabel msdos mkpart primary fat16 2048s 100%
          dd if="${GITHUB_WORKSPACE}/artifacts/firmware-with-tce.img" of=firmware-with-tce-disk.img bs=512 seek=2048
          mv firmware-with-tce-disk.img "${GITHUB_WORKSPACE}/artifacts/firmware-with-tce-disk.img"

      - name: upload firmware with tce disk image
        uses: actions/upload-artifact@v4
        with:
          name: firmware-with-tce-disk-${{matrix.package}}.img
          path: "${{github.workspace}}/artifacts/firmware-with-tce-disk.img"

      - name: Export rootfs
        uses: docker/build-push-action@v6
        with:
          file: docker/Dockerfile
          platforms: linux/arm64/v8
          target: rootfs
          build-args: |
            PACKAGE=${{ matrix.package }}
            PICORE_VERSION_MAJOR=${{ env.PICORE_VERSION_MAJOR }}
            PICORE_VERSION_MINOR=${{ env.PICORE_VERSION_MINOR }}
            PICORE_VERSION_MICRO=${{ env.PICORE_VERSION_MICRO }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: "type=local,dest=${{github.workspace}}/artifacts/"

      - name: upload rootfs
        uses: actions/upload-artifact@v4
        with:
          name: rootfs-${{matrix.package}}
          path: "${{github.workspace}}/artifacts/rootfs-${{matrix.package}}-${{env.PICORE_VERSION_MAJOR}}.${{env.PICORE_VERSION_MINOR}}.gz"

  build-kernel-qemu:
    runs-on: ubuntu-24.04-arm
    steps:
      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/asssaf/picore-kernel-qemu
          tags: "type=raw,value=${{ env.TAG }},priority=2000"

      - name: build deps
        if: false
        uses: docker/build-push-action@v6
        with:
          file: docker/Dockerfile.kernel-qemu
          platforms: linux/arm64/v8
          target: deps
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: build kernel
        if: false
        uses: docker/build-push-action@v6
        with:
          file: docker/Dockerfile.kernel-qemu
          platforms: linux/arm64/v8
          target: build
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: output kernel
        uses: docker/build-push-action@v6
        with:
          file: docker/Dockerfile.kernel-qemu
          platforms: linux/arm64/v8
          target: kernel
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: "type=local,dest=${{github.workspace}}/artifacts"

      - name: upload kernel for qemu
        uses: actions/upload-artifact@v4
        with:
          name: kernel8-qemu-${{ env.KERNEL_VERSION }}
          path: "${{github.workspace}}/artifacts/Image-${{ env.KERNEL_VERSION }}"

      - name: upload config for qemu
        uses: actions/upload-artifact@v4
        with:
          name: config-kernel8-qemu-${{ env.KERNEL_VERSION }}
          path: "${{github.workspace}}/artifacts/config-${{ env.KERNEL_VERSION }}"

      - name: output modules
        if: false
        uses: docker/build-push-action@v6
        with:
          file: docker/Dockerfile.kernel-qemu
          platforms: linux/arm64/v8
          target: modules
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: "type=tar,dest=${{github.workspace}}/artifacts/modules-${{ env.KERNEL_VERSION }}.tar"

      - name: upload modules for qemu
        if: false
        uses: actions/upload-artifact@v4
        with:
          name: modules-qemu-${{ env.KERNEL_VERSION }}
          path: "${{github.workspace}}/artifacts/modules-${{ env.KERNEL_VERSION }}.tar"

  test:
    strategy:
      matrix:
        package: [piCore, piCore64]
    runs-on: ubuntu-24.04
    needs: [build, build-kernel-qemu]
    steps:
      - name: install-qemu
        run: |
          sudo apt install -y qemu-system-arm

      - name: download-kernel
        uses: actions/download-artifact@v4
        with:
          name: kernel8-qemu-${{ env.KERNEL_VERSION }}
          path: "${{github.workspace}}"

      - name: download-tce-disk
        uses: actions/download-artifact@v4
        with:
          name: tce-disk-${{matrix.package}}.img
          path: "${{github.workspace}}"

      - name: download-rootfs
        uses: actions/download-artifact@v4
        with:
          name: rootfs-${{matrix.package}}
          path: "${{github.workspace}}"

      - name: run
        timeout-minutes: 5
        run: |
          set -euxo pipefail

          KERNEL="${GITHUB_WORKSPACE}/Image-${KERNEL_VERSION}"
          INITRD="${GITHUB_WORKSPACE}/rootfs-${{matrix.package}}-${PICORE_VERSION_MAJOR}.${PICORE_VERSION_MINOR}.gz"
          IMAGE="${GITHUB_WORKSPACE}/tce-disk.img"
          CMDLINE="console=ttyAMA0,115200 text root=/dev/ram0 nortc rootwait loglevel=3 tce=vda1 debug=y serial0=ttyAMA0 nozswap"
          qemu-system-aarch64 -machine virt -cpu cortex-a72 -smp 2 -m 1G \
            -kernel "$KERNEL" -append "$CMDLINE" \
            -initrd "$INITRD" \
            -nographic \
            -drive "format=raw,file=$IMAGE,if=none,id=hd0,cache=writeback,media=disk" \
            -device virtio-blk,drive=hd0,bootindex=0 \
            -netdev user,id=mynet,hostfwd=tcp::2223-:22 \
            -device virtio-net-pci,netdev=mynet \
            -monitor telnet:127.0.0.1:5555,server,nowait |& tee qemu.out &

          until sshpass -p piCore ssh -o StrictHostKeychecking=no -p 2223 tc@127.0.0.1 echo hi
          do
            sleep 5
          done
          sshpass -p piCore ssh -o StrictHostKeychecking=no -p 2223 tc@127.0.0.1 tryboot
          sshpass -p piCore ssh -o StrictHostKeychecking=no -p 2223 tc@127.0.0.1 sudo poweroff

      - name: upload log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: qemu.out
          path: "${{github.workspace}}/qemu.out"

